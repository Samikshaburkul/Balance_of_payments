"Current Account, Goods and Services, Debit, US Dollars",
"Financial Account, Other Investment, Loans, Net Incurrence of Liabilities, US Dollars",
"Financial Account, Other Investment, Loans, US Dollars",
"Current Account, Goods and Services, Services, Transport, Credit, US Dollars",
"Current Account, Goods and Services, Services, Transport, Debit, US Dollars",
"Supplementary Items, Reserve Assets (with Fund Record), US Dollars",
"Supplementary Items, Total Current + Capital Account, US Dollars")
)
# Update the Indicator names
data$Indicator <- indicator_mapping[data$Indicator]
# Calculate the balances for each indicator and year
results <- data %>%
pivot_longer(
cols = starts_with("X"),
names_prefix = "X",
names_to = "Year",
values_to = "Value"
) %>%
group_by(Country, Year) %>%
summarise(
Current_Account_Balance = sum(Value[Indicator == "Current_Account_Credit"]) -
sum(Value[Indicator == "Current_Account_Debit"]),
Financial_Account_Loans_Balance = sum(Value[Indicator == "Financial_Loans_Net_Liabilities"]) +
sum(Value[Indicator == "Financial_Loans_Total"]),
Transport_Services_Balance = sum(Value[Indicator == "Transport_Services_Credit"]) -
sum(Value[Indicator == "Transport_Services_Debit"]),
Supplementary_Items_Balance = sum(Value[Indicator == "Supplementary_Reserve_Assets"]) +
sum(Value[Indicator == "Supplementary_Current_Capital"])
) %>%
ungroup()
# Check the results
head(results)
# Load the train dataset
df <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv')
# Load the train dataset
df <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv')
nrow(df)
#
library(dplyr)
library(tidyr)
library(modelr)
# Load your data - replace with the actual path to your CSV file
data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Generate dummy variables for the 'Country' column
data <- data %>%
mutate(Country = as.factor(Country)) %>%
modelr::add_dummy_variables(select = -Country, exclude = Country)
install.packages("fastDummies")
library(dplyr)
library(fastDummies)
library(tidyr)
# Load your data - replace with the actual path to your CSV file
data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Generate dummy variables for the 'Country' column
data <- data %>%
dummy_cols("Country", remove_selected_columns = TRUE)
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
data[continuous_vars] <- scale(data[continuous_vars])
# View the first few rows of the processed data
head(data)
###### Test data
# Load your data - replace with the actual path to your CSV file
data_test <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Generate dummy variables for the 'Country' column
data_test <- data_test %>%
dummy_cols("Country", remove_selected_columns = TRUE)
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
data_test[continuous_vars] <- scale(data_test[continuous_vars])
# View the first few rows of the processed data
head(data_test)
library(dplyr)
library(fastDummies)
library(tidyr)
# Load your data - replace with the actual path to your CSV file
train_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Generate dummy variables for the 'Country' column
train_data <- train_data %>%
dummy_cols("Country", remove_selected_columns = TRUE)
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
train_data[continuous_vars] <- scale(train_data[continuous_vars])
# View the first few rows of the processed data
head(train_data)
###### Test data
# Load your data - replace with the actual path to your CSV file
test_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Generate dummy variables for the 'Country' column
test_data <- test_data %>%
dummy_cols("Country", remove_selected_columns = TRUE)
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
test_data[continuous_vars] <- scale(test_data[continuous_vars])
# View the first few rows of the processed data
head(test_data)
library(dplyr)
library(fastDummies)
library(caret)
# Assuming 'Net_Lending_Borrowing_Balance' is the target variable
target_var <- 'Net_Lending_Borrowing_Balance'
# Preprocess the train dataset
train_data <- train_data %>%
dummy_cols("Country", remove_selected_columns = TRUE) %>%
mutate(across(where(is.numeric), scale))
library(dplyr)
library(fastDummies)
library(caret)
# Load the training data
train_data_path <- '/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv'
train_data <- read.csv(train_data_path, stringsAsFactors = FALSE)
# Load the testing data
test_data_path <- '/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv'
test_data <- read.csv(test_data_path, stringsAsFactors = FALSE)
# Combine train and test data to ensure consistent factor levels
combined_data <- bind_rows(train_data, test_data, .id = "dataset_id")
# Generate dummy variables for the 'Country' column
combined_data <- combined_data %>%
dummy_cols("Country", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# Split combined data back into train and test sets
train_data_processed <- combined_data %>%
filter(dataset_id == "1") %>%
select(-dataset_id)
test_data_processed <- combined_data %>%
filter(dataset_id == "2") %>%
select(-dataset_id)
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
# Note: It's important to use the same scaling parameters from train_data to scale test_data
train_data_processed[continuous_vars] <- scale(train_data_processed[continuous_vars])
scaling_parameters <- attr(scale(train_data[continuous_vars]), "scaled:center")
test_data_processed[continuous_vars] <- scale(test_data_processed[continuous_vars], center = scaling_parameters, scale = FALSE)
# 'Net_Lending_Borrowing_Balance' is the target variable
target_var <- 'Net_Lending_Borrowing_Balance'
# Fit the model on the train dataset
model <- lm(reformulate(setdiff(names(train_data_processed), target_var), target_var), data = train_data_processed)
library(dplyr)
library(fastDummies)
library(caret)
# Load the training data
train_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Load the testing data
test_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Function to clean country names
clean_country_names <- function(country_name) {
gsub(" ", "_", gsub("[^[:alnum:] ]", "", country_name))
}
# Clean up country names in both datasets
train_data$Country <- sapply(train_data$Country, clean_country_names)
test_data$Country <- sapply(test_data$Country, clean_country_names)
# Generate dummy variables for the 'Country' column
train_data <- dummy_cols(train_data, "Country", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
test_data <- dummy_cols(test_data, "Country", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# Ensure both datasets have the same dummy variables
all_vars <- union(names(train_data), names(test_data))
train_data[setdiff(all_vars, names(train_data))] <- 0
test_data[setdiff(all_vars, names(test_data))] <- 0
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
train_data[continuous_vars] <- scale(train_data[continuous_vars])
test_data[continuous_vars] <- scale(test_data[continuous_vars])
# Fit the model on the train dataset
target_var <- 'Net_Lending_Borrowing_Balance'
model <- lm(reformulate(setdiff(names(train_data), target_var), target_var), data = train_data)
# Make predictions on the test dataset
test_data$Predictions <- predict(model, newdata = test_data)
# Calculate residuals
test_data$Residuals <- with(test_data, get(target_var) - Predictions)
# Evaluate the model's performance
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(test_data$Residuals^2))
print(paste("RMSE:", rmse))
# Calculate R-squared
r_squared <- cor(test_data[[target_var]], test_data$Predictions)^2
print(paste("R-squared:", r_squared))
# Output the test predictions and residuals
write.csv(test_data, '/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataPredictions.csv', row.names = FALSE)
library(dplyr)
library(fastDummies)
library(caret)
# Load the training data
train_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Load the testing data
test_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Function to clean country names
clean_country_names <- function(country_name) {
gsub(" ", "_", gsub("[^[:alnum:] ]", "", country_name))
}
# Clean up country names in both datasets
train_data$Country <- sapply(train_data$Country, clean_country_names)
test_data$Country <- sapply(test_data$Country, clean_country_names)
# Generate dummy variables for the 'Country' column
train_data <- dummy_cols(train_data, "Country", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
test_data <- dummy_cols(test_data, "Country", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# Ensure both datasets have the same dummy variables
all_vars <- union(names(train_data), names(test_data))
train_data[setdiff(all_vars, names(train_data))] <- 0
test_data[setdiff(all_vars, names(test_data))] <- 0
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
train_data[continuous_vars] <- scale(train_data[continuous_vars])
test_data[continuous_vars] <- scale(test_data[continuous_vars])
# Fit the model on the train dataset
target_var <- 'Net_Lending_Borrowing_Balance'
model <- lm(reformulate(setdiff(names(train_data), target_var), target_var), data = train_data)
# Make predictions on the test dataset
test_data$Predictions <- predict(model, newdata = test_data)
# Calculate residuals
test_data$Residuals <- with(test_data, get(target_var) - Predictions)
# Evaluate the model's performance
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(test_data$Residuals^2))
print(paste("RMSE:", rmse/100))
# Calculate R-squared
r_squared <- cor(test_data[[target_var]], test_data$Predictions)^2
print(paste("R-squared:", r_squared))
# Output the test predictions and residuals
write.csv(test_data, '/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataPredictions_1.csv', row.names = FALSE)
library(dplyr)
library(fastDummies)
library(caret)
# Load the training data
train_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Load the testing data
test_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Function to clean country names
clean_country_names <- function(country_name) {
gsub(" ", "_", gsub("[^[:alnum:] ]", "", country_name))
}
# Clean up country names in both datasets
train_data$Country <- sapply(train_data$Country, clean_country_names)
test_data$Country <- sapply(test_data$Country, clean_country_names)
# Generate dummy variables for the 'Country' column
train_data <- dummy_cols(train_data, "Country", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
test_data <- dummy_cols(test_data, "Country", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# Ensure both datasets have the same dummy variables
all_vars <- union(names(train_data), names(test_data))
train_data[setdiff(all_vars, names(train_data))] <- 0
test_data[setdiff(all_vars, names(test_data))] <- 0
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
train_data[continuous_vars] <- scale(train_data[continuous_vars])
test_data[continuous_vars] <- scale(test_data[continuous_vars])
# Fit the model on the train dataset
target_var <- 'Net_Lending_Borrowing_Balance'
model <- lm(reformulate(setdiff(names(train_data), target_var), target_var), data = train_data)
# Make predictions on the test dataset
test_data$Predictions <- predict(model, newdata = test_data)
# Calculate residuals
test_data$Residuals <- with(test_data, get(target_var) - Predictions)
# Evaluate the model's performance
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(test_data$Residuals^2))
print(paste("RMSE:", rmse/100))
# Calculate R-squared
r_squared <- cor(test_data[[target_var]], test_data$Predictions)^2
print(paste("R-squared:", r_squared))
# Output the test predictions and residuals
#write.csv(test_data, '/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataPredictions_1.csv', row.names = FALSE)
summary(model)
# Load necessary libraries
library(dplyr)
library(caret)
# Assuming 'train_data' and 'test_data' are already loaded, preprocessed, and contain no NA values
# Fit the linear regression model (with a reduced number of predictors if necessary)
model <- lm(Net_Lending_Borrowing_Balance ~ . - one_of_the_redundant_predictors, data = train_data)
# Load necessary libraries
library(dplyr)
library(caret)
# Assuming 'train_data' and 'test_data' are already loaded, preprocessed, and contain no NA values
# Fit the linear regression model (with a reduced number of predictors if necessary)
model <- lm(Net_Lending_Borrowing_Balance ~ . - Country, data = train_data)
# Load necessary libraries
library(dplyr)
library(caret)
# Assuming 'train_data' and 'test_data' are already loaded, preprocessed, and contain no NA values
one_of_the_redundant_predictors <- 'Country'
# Fit the linear regression model (with a reduced number of predictors if necessary)
model <- lm(Net_Lending_Borrowing_Balance ~ . - one_of_the_redundant_predictors, data = train_data)
# Load necessary libraries
library(dplyr)
library(caret)
# Assuming 'train_data' and 'test_data' are already loaded, preprocessed, and contain no NA values
one_of_the_redundant_predictors <- Country
library(dplyr)
library(caret)
# Assuming 'train_data' and 'test_data' are already loaded and preprocessed
# Define the target variable
target_var <- 'Net_Lending_Borrowing_Balance'
# Fit the linear regression model without the 'Country' variable
model <- lm(reformulate(setdiff(names(train_data), c(target_var, 'Country')), target_var), data = train_data)
# Obtain the summary of the model
summary_model <- summary(model)
# Print the model summary
print(summary_model)
# Predict on the test dataset
predictions <- predict(model, newdata = test_data)
# Evaluate the model's performance
# Calculate residuals
residuals <- test_data[[target_var]] - predictions
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(residuals^2))
print(paste("RMSE:", rmse))
# Calculate R-squared
r_squared <- summary_model$r.squared
print(paste("R-squared:", r_squared))
library(dplyr)
library(fastDummies)
library(caret)
# Load the training data
train_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Load the testing data
test_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
train_data[continuous_vars] <- scale(train_data[continuous_vars])
test_data[continuous_vars] <- scale(test_data[continuous_vars])
# Fit the model on the train dataset without Country
target_var <- 'Net_Lending_Borrowing_Balance'
model <- lm(reformulate(setdiff(names(train_data), c(target_var, grep("Country", names(train_data), value = TRUE))), target_var), data = train_data)
# Make predictions on the test dataset
test_data$Predictions <- predict(model, newdata = test_data)
# Calculate residuals
test_data$Residuals <- with(test_data, get(target_var) - Predictions)
# Evaluate the model's performance
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(test_data$Residuals^2))
print(paste("RMSE:", rmse/100))
# Calculate R-squared
r_squared <- cor(test_data[[target_var]], test_data$Predictions)^2
print(paste("R-squared:", r_squared))
# Output the test predictions and residuals
# Uncomment the next line to save the output to a CSV file
# write.csv(test_data, '/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataPredictions_1.csv', row.names = FALSE)
# Print the summary of the model
summary(model)
library(dplyr)
library(fastDummies)
library(caret)
# Load the training data
train_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Load the testing data
test_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
train_data[continuous_vars] <- scale(train_data[continuous_vars])
test_data[continuous_vars] <- scale(test_data[continuous_vars])
# Fit the model on the train dataset without Country and X
target_var <- 'Net_Lending_Borrowing_Balance'
exclude_columns <- c(target_var, "X", grep("Country", names(train_data), value = TRUE))
model_formula <- reformulate(setdiff(names(train_data), exclude_columns), target_var)
model <- lm(model_formula, data = train_data)
# Make predictions on the test dataset
test_data$Predictions <- predict(model, newdata = test_data)
# Calculate residuals
test_data$Residuals <- with(test_data, get(target_var) - Predictions)
# Evaluate the model's performance
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(test_data$Residuals^2))
print(paste("RMSE:", rmse))
# Calculate R-squared
r_squared <- cor(test_data[[target_var]], test_data$Predictions)^2
print(paste("R-squared:", r_squared))
# Output the test predictions and residuals
# Uncomment the next line to save the output to a CSV file
# write.csv(test_data, '/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataPredictions_1.csv', row.names = FALSE)
# Print the summary of the model
summary(model)
# Assuming 'train_data' and 'test_data' are already loaded and preprocessed without the 'Country' variable
# Load necessary library
library(rpart)
# Define the target variable
target_var <- 'Net_Lending_Borrowing_Balance'
# Fit a regression tree model
tree_model <- rpart(formula = reformulate(setdiff(names(train_data), c(target_var, "X")), target_var),
data = train_data,
method = "anova")
# Make predictions on the test dataset
test_data$Predictions <- predict(tree_model, newdata = test_data)
# Evaluate the model's performance
# Calculate residuals
test_data$Residuals <- with(test_data, get(target_var) - Predictions)
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(test_data$Residuals^2))
print(paste("RMSE:", rmse))
# Plot the tree
plot(tree_model)
text(tree_model, use.n = TRUE)
# Print the summary of the tree model
summary(tree_model)
library(dplyr)
library(rpart)
# Load the training data
train_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Load the testing data
test_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Define the target variable
target_var <- 'Net_Lending_Borrowing_Balance'
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
train_data[continuous_vars] <- scale(train_data[continuous_vars])
test_data[continuous_vars] <- scale(test_data[continuous_vars])
# Fit a regression tree model excluding 'X' and 'Country'
exclude_columns <- c("X", grep("Country", names(train_data), value = TRUE))
model_formula <- reformulate(setdiff(names(train_data), c(target_var, exclude_columns)), target_var)
tree_model <- rpart(model_formula, data = train_data, method = "anova")
# Make predictions on the test dataset
test_data$Predictions <- predict(tree_model, newdata = test_data)
# Evaluate the model's performance
# Calculate residuals
test_data$Residuals <- with(test_data, get(target_var) - Predictions)
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(test_data$Residuals^2))
print(paste("RMSE:", rmse))
# Plot the tree
plot(tree_model)
text(tree_model, use.n = TRUE)
# Print the summary of the tree model
summary(tree_model)
library(dplyr)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(dplyr)
library(rpart)
library(rpart.plot)
# Load the training data
train_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Load the testing data
test_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Define the target variable
target_var <- 'Net_Lending_Borrowing_Balance'
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
train_data[continuous_vars] <- scale(train_data[continuous_vars])
test_data[continuous_vars] <- scale(test_data[continuous_vars])
# Fit a regression tree model excluding 'X' and 'Country' with a maximum depth of 3
exclude_columns <- c("X", grep("Country", names(train_data), value = TRUE))
model_formula <- reformulate(setdiff(names(train_data), c(target_var, exclude_columns)), target_var)
tree_model <- rpart(model_formula, data = train_data, method = "anova", control = rpart.control(maxdepth = 3))
# Make predictions on the test dataset
test_data$Predictions <- predict(tree_model, newdata = test_data)
# Evaluate the model's performance
# Calculate residuals
test_data$Residuals <- with(test_data, get(target_var) - Predictions)
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(test_data$Residuals^2))
print(paste("RMSE:", rmse))
# Save the plot as an image
png(filename = "/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/tree_plot.png", width = 1024, height = 768)
rpart.plot(tree_model)
dev.off()
# Print the summary of the tree model
summary(tree_model)
library(dplyr)
library(fastDummies)
library(caret)
# Load the training data
train_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
# Load the testing data
test_data <- read.csv('/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataBops.csv', stringsAsFactors = FALSE)
# Function to clean country names
clean_country_names <- function(country_name) {
gsub(" ", "_", gsub("[^[:alnum:] ]", "", country_name))
}
# Clean up country names in both datasets
train_data$Country <- sapply(train_data$Country, clean_country_names)
test_data$Country <- sapply(test_data$Country, clean_country_names)
# Generate dummy variables for the 'Country' column
train_data <- dummy_cols(train_data, "Country", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
test_data <- dummy_cols(test_data, "Country", remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# Ensure both datasets have the same dummy variables
all_vars <- union(names(train_data), names(test_data))
train_data[setdiff(all_vars, names(train_data))] <- 0
test_data[setdiff(all_vars, names(test_data))] <- 0
# Standardize the continuous variables
continuous_vars <- c("CURRENT_ACCOUNT_NET", "FINANCIAL_LOANS", "Net_Lending_Borrowing_Balance", "SUPPLEMENTARY_NET", "TRANSPORT_SERVICES_NET")
train_data[continuous_vars] <- scale(train_data[continuous_vars])
test_data[continuous_vars] <- scale(test_data[continuous_vars])
# Fit the model on the train dataset
target_var <- 'Net_Lending_Borrowing_Balance'
model <- lm(reformulate(setdiff(names(train_data), target_var), target_var), data = train_data)
# Make predictions on the test dataset
test_data$Predictions <- predict(model, newdata = test_data)
# Calculate residuals
test_data$Residuals <- with(test_data, get(target_var) - Predictions)
# Evaluate the model's performance
# Calculate RMSE (Root Mean Squared Error)
rmse <- sqrt(mean(test_data$Residuals^2))
print(paste("RMSE:", rmse/100))
# Calculate R-squared
r_squared <- cor(test_data[[target_var]], test_data$Predictions)^2
print(paste("R-squared:", r_squared))
# Output the test predictions and residuals
#write.csv(test_data, '/Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TestDataPredictions_1.csv', row.names = FALSE)
#summary(model)
library(dplyr)
library(rpart)
library(rpart.plot)
# Load the training and testing data
train_data <- read.csv('Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
print(getwd())
library(dplyr)
library(rpart)
library(rpart.plot)
# Load the training and testing data
train_data <- read.csv('Users/sai_avinash/Documents/GitHub/Team_ASAB/Group 7 Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
library(dplyr)
library(rpart)
library(rpart.plot)
# Load the training and testing data
train_data <- read.csv('Users/sai_avinash/Documents/GitHub/Team_ASAB/Group_7_Summary Paper/TrainDataBops.csv', stringsAsFactors = FALSE)
